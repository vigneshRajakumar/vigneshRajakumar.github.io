<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Academic | Vignesh Rajakumar</title>
    <link>https://vigneshrajakumar.github.io/tag/academic/</link>
      <atom:link href="https://vigneshrajakumar.github.io/tag/academic/index.xml" rel="self" type="application/rss+xml" />
    <description>Academic</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Sat, 06 Mar 2021 19:47:14 -0500</lastBuildDate>
    <image>
      <url>https://vigneshrajakumar.github.io/images/icon_hue73244445c53fd120a9ea8b4ffbe03f9_29120_512x512_fill_lanczos_center_2.png</url>
      <title>Academic</title>
      <link>https://vigneshrajakumar.github.io/tag/academic/</link>
    </image>
    
    <item>
      <title>A Case Study in Object Oriented Programming: Catan in Python</title>
      <link>https://vigneshrajakumar.github.io/post/case-study/</link>
      <pubDate>Sat, 06 Mar 2021 19:47:14 -0500</pubDate>
      <guid>https://vigneshrajakumar.github.io/post/case-study/</guid>
      <description>&lt;h1 id=&#34;a-case-study-in-object-oriented-programming-catan-in-python&#34;&gt;A Case Study in Object Oriented Programming: Catan in Python&lt;/h1&gt;
&lt;p&gt;Object oriented programming can be fun and rewarding. When you really get into it, you almost get the feeling that the code &lt;em&gt;builds itself&lt;/em&gt; after a point. When you&amp;rsquo;re taught Object Oriented Programming in a Software Engineering context at a college level computer science course, it&amp;rsquo;s often placed early on, &lt;em&gt;right after&lt;/em&gt; you&amp;rsquo;ve been taught a new language (or right after you&amp;rsquo;re taught programming in general). This sometimes makes it hard to really appreciate what value it adds to your software engineering toolkit.&lt;/p&gt;
&lt;p&gt;I was recently playing a game of &lt;em&gt;&lt;a href=&#34;https://www.catan.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Catan&lt;/a&gt;&lt;/em&gt; and found the interaction between settlements, cities, roads and the hexagonal tiles particularly interesting (and no, I &lt;em&gt;wasn&amp;rsquo;t&lt;/em&gt; doing this just because I was losing, why do you ask?). Trying to model these interaction and properties in code seemed like a tasty challenge, one that I can easily sink a weekend into. If I wanted to show the usefulness of object oriented programming, (Although, I should really pick a board game that didn&amp;rsquo;t have a 20-page &lt;a href=&#34;https://www.catan.com/service/game-rules&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;rule book&lt;/a&gt;). I&amp;rsquo;m not going to try and build an entire working game engine for this blog post; just a few classes and interactions. By the end of this blog post, I hope to have answered that itching question you&amp;rsquo;ve always wanted to ask your high school programming teacher or your Intro to Software Engineering professor: &lt;em&gt;What&amp;rsquo;s the big deal about Object Oriented Programming Anyway?&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;catan-brush-up&#34;&gt;Catan Brush-Up&lt;/h2&gt;
&lt;p&gt;If you&amp;rsquo;re rusty in your &lt;em&gt;Catan&lt;/em&gt;, &lt;a href=&#34;https://www.youtube.com/watch?v=hY2KnwfEBkA&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this video&lt;/a&gt; does a pretty good job of explaining the rules. Each turn basically boils down to this:&lt;/p&gt;
&lt;h2 id=&#34;oops-core-tenants&#34;&gt;OOP&amp;rsquo;s core tenants&lt;/h2&gt;
&lt;p&gt;Object Oriented programming has four main principles: Encapsulation, Abstraction, Inheritance and Polymorphism. I&amp;rsquo;d say that if you have a good intuitive understanding of the first three, you can build a strong understanding of and appreciation for OOP.&lt;/p&gt;
&lt;h3 id=&#34;abstraction&#34;&gt;Abstraction&lt;/h3&gt;
&lt;p&gt;First, I&amp;rsquo;ll model the hexagonal tiles that are synonymous with &lt;em&gt;Catan&lt;/em&gt;. There are 6 different types of tiles, and each one generates a different resource: &lt;em&gt;Pastures&lt;/em&gt; generate &lt;em&gt;Wool&lt;/em&gt;, &lt;em&gt;Forests&lt;/em&gt; generate &lt;em&gt;Wood&lt;/em&gt;, &lt;em&gt;Hills&lt;/em&gt; generate &lt;em&gt;Bricks&lt;/em&gt;, &lt;em&gt;Mountains&lt;/em&gt; generate &lt;em&gt;Ore&lt;/em&gt;, &lt;em&gt;Fields&lt;/em&gt; generate &lt;em&gt;Grain&lt;/em&gt; and &lt;em&gt;Deserts&lt;/em&gt; generate &amp;hellip; well, nothing. Writing down definitions for all of these in this blog post is a bit pointless, so I am going to focus on two: &lt;em&gt;Forests&lt;/em&gt; and &lt;em&gt;Pastures&lt;/em&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Tile(abc.ABC):
    @abc.abstractmethod
    def name(self):
        pass

    @abc.abstractmethod
    def generate_resource(self):
        pass

    @abc.abstractmethod
    def short_name(self):
        pass

class Forest(Tile):
    def name(self):
        return &amp;quot;Forest&amp;quot;

    def generate_resource(self):
        return Wood()

    def short_name(self):
        return &amp;quot;fo&amp;quot;

class Pasture(Tile):
    def name(self):
        print(&amp;quot;Pasture&amp;quot;)

    def generate_resource(self):
        return Wool()

    def short_name(self):
        return &amp;quot;pa&amp;quot;
    
class GameTile:
    def __init__(self, number_label, tile, points, position):
        self.number_label = number_label
        self.tile = tile
        self.points = points
        self.position = position
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The eagle-eyed among you would have noticed that I haven&amp;rsquo;t defined &lt;code&gt;Wood&lt;/code&gt; and &lt;code&gt;Wool&lt;/code&gt; anywhere yet. Good catch! Here they are:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class ResourceCard(abc.ABC):
    @abc.abstractmethod
    def name(self):
        pass

class Wood(ResourceCard):
    def name(self):
        return &amp;quot;Wood&amp;quot;

class Wool(ResourceCard):
    def name(self):
        return &amp;quot;Wool&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Its nothing fancy or complex, all it does is make each of the resource card objects human readable by returning a name. These definitions let me do something like this somewhere in my game engine code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def game_loop():

#
# ... complex engine code
#

    # get the active player to roll the dice
    roll = player.roll_dice(dice)
    
    # get the GameTiles that have the label associated with current roll
    active_tiles = game_tiles[roll]
    
    # for each of the tiles that matched
    for game_tile in active_tiles:
        # for each point in the hexagonal tile
        for point in game_tile.points:
            # If the point has a setllement or a city
            if point.abode is not None:
                # get the owner
                reciever = point.abode.owner
                # Give him the resource Card!
                reciever.add_resource(game_tile.tile.generate_resource())
                
#
# ... complex engine code
#
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There might be a lot going on there but focus on this specific line: &lt;code&gt;reciever.get_resource(game_tile.tile.generate_resource())&lt;/code&gt;. That&amp;rsquo;s the game engine calling the &lt;code&gt;generate_resource()&lt;/code&gt; method I wrote in the definition above. Since I &amp;lsquo;hid&amp;rsquo; away the logic to actually generate the resource into the &lt;code&gt;Tile&lt;/code&gt; classes, I don&amp;rsquo;t have to manually check the type of each tile when I hand out the resource cards to the player!&lt;/p&gt;
&lt;p&gt;This idea of &amp;lsquo;hiding away&amp;rsquo; code and logic that is not useful to the &lt;em&gt;current&lt;/em&gt; situation is called &lt;em&gt;&lt;strong&gt;Abstraction&lt;/strong&gt;&lt;/em&gt;. Another intuitive way to think of abstraction is using code as &lt;em&gt;building blocks&lt;/em&gt;: I used the implementation of the tiles&#39; &lt;code&gt;generate_resource()&lt;/code&gt; method to &lt;em&gt;build upon&lt;/em&gt; for the game engine logic. Also, the &lt;code&gt;Forest&lt;/code&gt; class &lt;em&gt;itself&lt;/em&gt; builds upon the code defined in the &lt;code&gt;Wood&lt;/code&gt; class.&lt;/p&gt;
&lt;h3 id=&#34;encapsulation&#34;&gt;Encapsulation&lt;/h3&gt;
&lt;p&gt;I hinted at the existence of a &lt;code&gt;Player&lt;/code&gt; class in the game engine code above. Let&amp;rsquo;s look at it now:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Player:
    def __init__(self, color):
        self.color = color
        self.victory_points = 0
        self.resource_cards = ResourceCardDeck()
        self.development_cards = []
        
    def add_resource(self, resource_card):
        &amp;quot;&amp;quot;&amp;quot;
        Adds the given resource into the player&#39;s hand
        &amp;quot;&amp;quot;&amp;quot;
        self.resource_cards.add_card(resource_card)
        
    def accept_trade(self, incoming_trade, requested_trade):
        &amp;quot;&amp;quot;&amp;quot;
        Adds the cards from the incoming trade to the player&#39;s hand and 
        removes those from the requested trade
        
        both incoming_trade and requested_trade are dictionaries where the key is the card type
        and the value is the number of cards of that type.
        &amp;quot;&amp;quot;&amp;quot;
        for card in requested_trade:
            number_of_cards = requested_trade[card]
            self.resource_cards.remove_cards(card, number_of_cards)
        for card in incoming_trade:
            number_of_cards = incoming_trade[card]
            self.resource_cards.add_cards(card, number_of_cards)
    
    def add_development_card(self, card):
        &amp;quot;&amp;quot;&amp;quot;
        Adds the given development card into the players hand
        &amp;quot;&amp;quot;&amp;quot;
        self.development_cards.append(card)
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: The implementation of adding and removing cards from the resource cards in the players hand is not simple and not relevant here, so I, wait for it, &lt;em&gt;abstracted&lt;/em&gt; it away :)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Each turn, a player could:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Get resource cards if the die roll is in their favor.&lt;/li&gt;
&lt;li&gt;Use their resource cards to buy a development card.&lt;/li&gt;
&lt;li&gt;Trade resource cards with another player.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For the sake of simplicity, I am going to stick to modeling just these three actions. Each of these actions are handled in each of the three methods in the &lt;code&gt;Player&lt;/code&gt; class. Each of those methods in turn, manipulate the resource cards or development cards in the player&amp;rsquo;s hand.&lt;/p&gt;
&lt;p&gt;What we&amp;rsquo;ve done here by clubbing together a classes &lt;em&gt;data&lt;/em&gt; (the player&amp;rsquo;s hand) and &lt;em&gt;functions that affect the data&lt;/em&gt; (the three actions above) into one class is called &lt;em&gt;&lt;strong&gt;Encapsulation&lt;/strong&gt;&lt;/em&gt;. It also makes it so that a player&amp;rsquo;s hand can only be modified by actions that happen to &lt;em&gt;that&lt;/em&gt; player. (In a legal game, you wouldn&amp;rsquo;t have players stealing each others cards!). Encapsulation &amp;lsquo;protects&amp;rsquo; the classes data from code outside the class.&lt;/p&gt;
&lt;h3 id=&#34;inheritance&#34;&gt;Inheritance&lt;/h3&gt;
&lt;p&gt;No version of &lt;em&gt;Catan&lt;/em&gt; is complete without the all-important Settlements and Cities. Here is what they look like in my code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Building(abc.ABC):
    
    def __init__(self, owner, name):
        self.owner = owner
        self.name = name

    def description(self):
        return &amp;quot;%s owned by %s&amp;quot; % (self.name, self.owner)

class Abode(Building):
    def __init__(self, owner, name, victory_points):
        super.__init__(owner, name)
        self.victory_points = victory_points

class Settlement(Abode):
    def __init__(self, owner):
        super.__init__(self, owner, &amp;quot;Settlement&amp;quot;, 1)

class City(Abode):
    def __init__(self, owner):
        super.__init__(self, owner, &amp;quot;City&amp;quot;, 2)

class Road(Building):
    def __init__(self, owner):
        super.__init__(self, owner, &amp;quot;Road&amp;quot;)

class Point:
    def __init__(self, abode, position, n1, n2, n3):
        self.abode = abode
        self.n1 = n1
        self.n2 = n2
        self.n3 = n3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What I&amp;rsquo;ve done here is that I&amp;rsquo;ve leverage the &lt;em&gt;is-a&lt;/em&gt; relationship some of these buildings have. For example, Settlements and Cities are similar in that the count towards a player&amp;rsquo;s victory points. I called these victory point generating buildings &lt;em&gt;Abodes&lt;/em&gt;. &lt;em&gt;Cities&lt;/em&gt; and &lt;em&gt;Settlements&lt;/em&gt; are &lt;em&gt;Abodes&lt;/em&gt;; &lt;em&gt;Roads&lt;/em&gt; are not. They are all still buildings though, and can be owned by players.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve modeled these hierarchical relationships using &lt;em&gt;&lt;strong&gt;Inheritance&lt;/strong&gt;&lt;/em&gt;. Inheritance often goes hand-in-hand with abstraction. You can see it in action here: I abstracted away code that is specific to a city into the &lt;code&gt;City&lt;/code&gt; class.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;What&amp;rsquo;s covered in this blog post is just the tip of the iceberg though! There is still quite a lot I didn&amp;rsquo;t cover: Delegation, Polymorphism, Dynamic Dispatch (We did do a fair bit of this in this post ,though) and Composition. However, my intention with this post was to hopefully help you build an intuitive understanding of &lt;em&gt;why&lt;/em&gt; OOP is preached so much, not to teach it outright.&lt;/p&gt;
&lt;p&gt;Hopefully, you saw what I meant when I meant when I talked about the code building itself if you approach your problem with strong Object Oriented Programming ideals. I&amp;rsquo;m hoping that reading this blog post encourages you to try and model your favorite board game! (If its &lt;em&gt;Catan&lt;/em&gt;, I&amp;rsquo;m open to any improvements you might suggest to what I&amp;rsquo;ve written.)&lt;/p&gt;
&lt;p&gt;The demo code I used in this post can be found on my &lt;a href=&#34;https://github.com/vigneshRajakumar/Catan&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
